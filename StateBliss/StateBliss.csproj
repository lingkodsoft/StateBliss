<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net471;net472;netstandard2.0;netcoreapp2.1;netcoreapp2.2</TargetFrameworks>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Title>StateBliss - fluent style finite state machine</Title>
        <Authors>Michael Cyril D. Magsuci</Authors>
        <PackageProjectUrl>https://github.com/lingkodsoft/StateBliss</PackageProjectUrl>
        <PackageLicenseUrl>https://github.com/lingkodsoft/StateBliss/blob/master/LICENSE.md</PackageLicenseUrl>
        <RepositoryUrl>https://github.com/lingkodsoft/StateBliss.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageTags>FiniteStateMachine, State Machine</PackageTags>
        <Version>1.0.1</Version>
        <AssemblyVersion>1.0.2.0</AssemblyVersion>
        <FileVersion>1.0.2.0</FileVersion>
        <PackageVersion>1.0.5</PackageVersion>
        <Description>Finite state machine with fluent syntax. i.e.

public class DefineAuthenticationState2 : StateDefinition&lt;AuthenticationState&gt;
{
	public override void Define(IStateFromBuilder&lt;AuthenticationState&gt; builder)
	{
		builder.From(AuthenticationState.Unauthenticated).To(AuthenticationState.Authenticated)
			.Changing(this, a =&gt; a.ChangingHandler1);

	}

	private void ChangingHandler2(StateChangeGuardInfo&lt;AuthenticationState&gt; changeinfo)
	{
		var data = changeinfo.DataAs&lt;Dictionary&lt;string, object&gt;&gt;();
		data["key2"] = "ChangingHandler2";
	}
}

public class BasicTests //xUnit
{
		
	public enum AuthenticationState
	{
		Unauthenticated,
		Authenticated
	}

	[Fact]
	public void Tests()
	{
		// Arrange
		StateMachineManager.Register(new [] { typeof(BasicTests).Assembly }); //Register at bootstrap of your application, i.e. Startup
		var currentState = AuthenticationState.Unauthenticated;
		var data = new Dictionary&lt;string, object&gt;();
		
		// Act
		var changeInfo = StateMachineManager.Trigger(currentState, AuthenticationState.Authenticated, data);
		
		// Assert
		Assert.True(changeInfo.StateChangedSucceeded);
		Assert.Equal("ChangingHandler1", changeInfo.Data["key1"]);
	}
}



</Description>
    </PropertyGroup>

</Project>
